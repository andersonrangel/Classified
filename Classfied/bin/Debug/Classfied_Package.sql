/*
    Generated date:     2020-09-01T14:01:12Z
    Generated on:       SLS-LT-ANDERSON
    Package version:    
    Migration version:  (n/a)
    Baseline version:   (n/a)
    SQL Change Automation version:  4.3.20211.21565

    IMPORTANT! "SQLCMD Mode" must be activated prior to execution (under the Query menu in SSMS).

    BEFORE EXECUTING THIS SCRIPT, WE STRONGLY RECOMMEND YOU TAKE A BACKUP OF YOUR DATABASE.

    This SQLCMD script is designed to be executed through MSBuild (via the .sqlproj Deploy target) however
    it can also be run manually using SQL Management Studio.

    It was generated by the SQL Change Automation build task and contains logic to deploy the database, ensuring that
    each of the incremental migrations is executed a single time only in alphabetical (filename)
    order. If any errors occur within those scripts, the deployment will be aborted and the transaction
    rolled-back.

    NOTE: Automatic transaction management is provided for incremental migrations, so you don't need to
          add any special BEGIN TRAN/COMMIT/ROLLBACK logic in those script files.
          However if you require transaction handling in your Pre/Post-Deployment scripts, you will
          need to add this logic to the source .sql files yourself.
*/

----====================================================================================================================
---- SQLCMD Variables
---- This script is designed to be called by SQLCMD.EXE with variables specified on the command line.
---- However you can also run it in SQL Management Studio by uncommenting this section (CTRL+K, CTRL+U).
--:setvar DatabaseName ""
--:setvar ReleaseVersion ""
--:setvar ForceDeployWithoutBaseline "False"
--:setvar DefaultFilePrefix ""
--:setvar DefaultDataPath ""
--:setvar DefaultLogPath ""
--:setvar DefaultBackupPath ""
--:setvar DeployPath ""
----====================================================================================================================

:on error exit -- Instructs SQLCMD to abort execution as soon as an erroneous batch is encountered

:setvar PackageVersion ""
:setvar IsShadowDeployment 0

GO
:setvar IsSqlCmdEnabled "True"
GO

IF N'$(DatabaseName)' = N'$' + N'(DatabaseName)' OR
   N'$(ReleaseVersion)' = N'$' + N'(ReleaseVersion)' OR
   N'$(ForceDeployWithoutBaseline)' = N'$' + N'(ForceDeployWithoutBaseline)'
      RAISERROR('(This will not throw). Please make sure that all SQLCMD variables are defined before running this script.', 0, 0);
GO

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
SET XACT_ABORT ON; -- Abort the current batch immediately if a statement raises a run-time error and rollback any open transaction(s)

IF N'$(IsSqlCmdEnabled)' <> N'True' -- Is SQLCMD mode not enabled within the execution context (eg. SSMS)
    BEGIN
        IF IS_SRVROLEMEMBER(N'sysadmin') = 1
            BEGIN -- User is sysadmin; abort execution by disconnect the script from the database server
                RAISERROR(N'This script must be run in SQLCMD Mode (under the Query menu in SSMS). Aborting connection to suppress subsequent errors.', 20, 127, N'UNKNOWN') WITH LOG;
            END
        ELSE
            BEGIN -- User is not sysadmin; abort execution by switching off statement execution (script will continue to the end without performing any actual deployment work)
                RAISERROR(N'This script must be run in SQLCMD Mode (under the Query menu in SSMS). Script execution has been halted.', 16, 127, N'UNKNOWN') WITH NOWAIT;
            END
    END
GO
IF @@ERROR != 0
    BEGIN
        SET NOEXEC ON; -- SQLCMD is NOT enabled so prevent any further statements from executing
    END
GO
-- Beyond this point, no further explicit error handling is required because it can be assumed that SQLCMD mode is enabled

IF SERVERPROPERTY('EngineEdition') = 5 AND DB_NAME() != N'$(DatabaseName)'
  RAISERROR(N'Azure SQL Database does not support switching between databases. Connect to [$(DatabaseName)] and then re-run the script.', 16, 127);








------------------------------------------------------------------------------------------------------------------------
------------------------------------------       PRE-DEPLOYMENT SCRIPTS       ------------------------------------------
------------------------------------------------------------------------------------------------------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

PRINT '----- executing pre-deployment script "Pre-Deployment\01_Initialize_Deployment.sql" -----';
GO

---------------------- BEGIN PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\01_Initialize_Deployment.sql" ------------------------
/*
Pre-Deployment Script Template
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be prepended to the build script.
 Use SQLCMD syntax to include a file in the pre-deployment script.
 Example:      :r .\myfile.sql
 Use SQLCMD syntax to reference a variable in the post-deployment script.
 Example:      :setvar TableName MyTable
               SELECT * FROM [$(TableName)]
--------------------------------------------------------------------------------------
*/

GO
----------------------- END PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\01_Initialize_Deployment.sql" -------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;









------------------------------------------------------------------------------------------------------------------------
------------------------------------------       INCREMENTAL MIGRATIONS       ------------------------------------------
------------------------------------------------------------------------------------------------------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
PRINT '# Beginning transaction';

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
PRINT '# Setting up migration log table';
IF (NOT EXISTS (SELECT * FROM sys.objects WHERE [object_id] = OBJECT_ID(N'[dbo].[__MigrationLog]') AND [type] = 'U'))
  BEGIN
    IF OBJECT_ID(N'[dbo].[__MigrationLogCurrent]', 'V') IS NOT NULL
      DROP VIEW [dbo].[__MigrationLogCurrent];
    PRINT '# Creating a new migration log table';
    CREATE TABLE [dbo].[__MigrationLog] (
      [migration_id] UNIQUEIDENTIFIER NOT NULL,
      [script_checksum] NVARCHAR (64) NOT NULL,
      [script_filename] NVARCHAR (255) NOT NULL,
      [complete_dt] DATETIME2 NOT NULL,
      [applied_by] NVARCHAR (100) NOT NULL,
      [deployed] TINYINT CONSTRAINT [DF___MigrationLog_deployed] DEFAULT (1) NOT NULL,
      [version] VARCHAR (255) NULL,
      [package_version] VARCHAR (255) NULL,
      [release_version] VARCHAR (255) NULL,
      [sequence_no] INT IDENTITY (1, 1) NOT NULL CONSTRAINT [PK___MigrationLog] PRIMARY KEY CLUSTERED ([migration_id], [complete_dt], [script_checksum]));
    CREATE NONCLUSTERED INDEX [IX___MigrationLog_CompleteDt]
      ON [dbo].[__MigrationLog]([complete_dt]);
    CREATE NONCLUSTERED INDEX [IX___MigrationLog_Version]
      ON [dbo].[__MigrationLog]([version]);
    CREATE UNIQUE NONCLUSTERED INDEX [UX___MigrationLog_SequenceNo]
      ON [dbo].[__MigrationLog]([sequence_no]);
    EXECUTE ('
	CREATE VIEW [dbo].[__MigrationLogCurrent]
			AS
			WITH currentMigration AS
			(
			  SELECT
				 migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed, ROW_NUMBER() OVER(PARTITION BY migration_id ORDER BY sequence_no DESC) AS RowNumber
			  FROM [dbo].[__MigrationLog]
			)
			SELECT  migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed
			FROM currentMigration
			WHERE RowNumber = 1
	');
    IF OBJECT_ID(N'sp_addextendedproperty', 'P') IS NOT NULL
      BEGIN
        PRINT N'Creating extended properties';
        EXECUTE sp_addextendedproperty N'MS_Description', N'This table is required by SQL Change Automation projects to keep track of which migrations have been executed during deployment. Please do not alter or remove this table from the database.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', NULL, NULL;
        EXECUTE sp_addextendedproperty N'MS_Description', N'The executing user at the time of deployment (populated using the SYSTEM_USER function).', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'applied_by';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The date/time that the migration finished executing. This value is populated using the SYSDATETIME function.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'complete_dt';
        EXECUTE sp_addextendedproperty N'MS_Description', N'This column contains a number of potential states:

0 - Marked As Deployed: The migration was not executed.
1- Deployed: The migration was executed successfully.
2- Imported: The migration was generated by importing from this DB.

"Marked As Deployed" and "Imported" are similar in that the migration was not executed on this database; it was was only marked as such to prevent it from executing during subsequent deployments.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'deployed';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The unique identifier of a migration script file. This value is stored within the <Migration /> Xml fragment within the header of the file itself.

Note that it is possible for this value to repeat in the [__MigrationLog] table. In the case of programmable object scripts, a record will be inserted with a particular ID each time a change is made to the source file and subsequently deployed.

In the case of a migration, you may see the same [migration_id] repeated, but only in the scenario where the "Mark As Deployed" button/command has been run.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'migration_id';
        EXECUTE sp_addextendedproperty N'MS_Description', N'If you have enabled SQLCMD Packaging in your SQL Change Automation project, or if you are using Octopus Deploy, this will be the version number that your database package was stamped with at build-time.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'package_version';
        EXECUTE sp_addextendedproperty N'MS_Description', N'If you are using Octopus Deploy, you can use the value in this column to look-up which release was responsible for deploying this migration.
If deploying via PowerShell, set the $ReleaseVersion variable to populate this column.
If deploying via Visual Studio, this column will always be NULL.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'release_version';
        EXECUTE sp_addextendedproperty N'MS_Description', N'A SHA256 representation of the migration script file at the time of build.  This value is used to determine whether a migration has been changed since it was deployed. In the case of a programmable object script, a different checksum will cause the migration to be redeployed.
Note: if any variables have been specified as part of a deployment, this will not affect the checksum value.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'script_checksum';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The name of the migration script file on disk, at the time of build.
If Semantic Versioning has been enabled, then this value will contain the full relative path from the root of the project folder. If it is not enabled, then it will simply contain the filename itself.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'script_filename';
        EXECUTE sp_addextendedproperty N'MS_Description', N'An auto-seeded numeric identifier that can be used to determine the order in which migrations were deployed.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'sequence_no';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The semantic version that this migration was created under. In SQL Change Automation projects, a folder can be given a version number, e.g. 1.0.0, and one or more migration scripts can be stored within that folder to provide logical grouping of related database changes.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'version';
        EXECUTE sp_addextendedproperty N'MS_Description', N'This view is required by SQL Change Automation projects to determine whether a migration should be executed during a deployment. The view lists the most recent [__MigrationLog] entry for a given [migration_id], which is needed to determine whether a particular programmable object script needs to be (re)executed: a non-matching checksum on the current [__MigrationLog] entry will trigger the execution of a programmable object script. Please do not alter or remove this table from the database.', N'SCHEMA', N'dbo', N'VIEW', N'__MigrationLogCurrent', NULL, NULL;
      END
  END

IF NOT EXISTS (SELECT col.COLUMN_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS tab, INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE AS col WHERE col.CONSTRAINT_NAME = tab.CONSTRAINT_NAME AND col.TABLE_NAME = tab.TABLE_NAME AND col.TABLE_SCHEMA = tab.TABLE_SCHEMA AND tab.CONSTRAINT_TYPE = 'PRIMARY KEY' AND col.TABLE_SCHEMA = 'dbo' AND col.TABLE_NAME = '__MigrationLog' AND col.COLUMN_NAME = 'complete_dt')
  BEGIN
    RAISERROR (N'The SQL Change Automation [dbo].[__MigrationLog] table has an incorrect primary key specification. This may be due to the fact that the <SqlChangeAutomationSchemaVersion/> element in your .sqlproj file contains the wrong version number for your database. Please check earlier versions of your .sqlproj file to determine what is the appropriate version for your database (possibly 1.7 or 1.3.1).', 16, 127, N'UNKNOWN')
      WITH NOWAIT;
    RETURN;
  END

IF COL_LENGTH(N'[dbo].[__MigrationLog]', N'sequence_no') IS NULL
  BEGIN
    RAISERROR (N'The SQL Change Automation [dbo].[__MigrationLog] table is missing the [sequence_no] column. This may be due to the fact that the <SqlChangeAutomationSchemaVersion/> element in your .sqlproj file contains the wrong version number for your database. Please check earlier versions of your .sqlproj file to determine what is the appropriate version for your database (possibly 1.7 or 1.3.1).', 16, 127, N'UNKNOWN')
      WITH NOWAIT;
    RETURN;
  END

IF (NOT EXISTS (SELECT * FROM sys.objects WHERE [object_id] = OBJECT_ID(N'[dbo].[__MigrationLogCurrent]') AND [type] = 'V'))
  BEGIN
    EXECUTE ('
	CREATE VIEW [dbo].[__MigrationLogCurrent]
			AS
			WITH currentMigration AS
			(
			  SELECT
				 migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed, ROW_NUMBER() OVER(PARTITION BY migration_id ORDER BY sequence_no DESC) AS RowNumber
			  FROM [dbo].[__MigrationLog]
			)
			SELECT  migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed
			FROM currentMigration
			WHERE RowNumber = 1
	');
  END

GO
PRINT '# Setting up __SchemaSnapshot table';
IF (NOT EXISTS (SELECT * FROM sys.objects WHERE [object_id] = OBJECT_ID(N'[dbo].[__SchemaSnapshot]')))
  BEGIN
    CREATE TABLE [dbo].[__SchemaSnapshot] (
      [Snapshot] VARBINARY (MAX),
      [LastUpdateDate] DATETIME2 CONSTRAINT [__SchemaSnapshotDateDefault] DEFAULT SYSDATETIME());
    IF OBJECT_ID(N'sp_addextendedproperty', 'P') IS NOT NULL
      BEGIN
        EXECUTE sp_addextendedproperty N'MS_Description', N'This table is used by SQL Change Automation projects to store a snapshot of the schema at the time of the last deployment. Please do not alter or remove this table from the database.', 'SCHEMA', N'dbo', 'TABLE', N'__SchemaSnapshot', NULL, NULL;
      END
  END

GO
PRINT '# Truncating __SchemaSnapshot';
TRUNCATE TABLE [dbo].[__SchemaSnapshot];

GO
PRINT '# Check if baseline is required';
DECLARE @baselineRequired AS BIT;

SET @baselineRequired = 0;

IF (EXISTS (SELECT * FROM sys.objects AS o WHERE o.is_ms_shipped = 0 AND NOT (o.name LIKE '%__MigrationLog%' OR o.name LIKE '%__SchemaSnapshot%')) AND (SELECT count(*) FROM [dbo].[__MigrationLog]) = 0)
  SET @baselineRequired = 1;

IF @baselineRequired = 1
  BEGIN
    PRINT '----- baselined: Migrations\1.0.0-Baseline\001_20200901-0002_Anderson.Rangel.sql (marked as deployed) -----';
    INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
    VALUES                                         (CAST ('87de47e2-f68e-4dba-a389-755112dcce84' AS UNIQUEIDENTIFIER), '7808BFF7EDD9F751D9D6282C81B6A9BED04DED22B20889A2BC5F9D5ACC2CE748', 'Migrations\1.0.0-Baseline\001_20200901-0002_Anderson.Rangel.sql', SYSDATETIME(), SYSTEM_USER, 0, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);
  END

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('87de47e2-f68e-4dba-a389-755112dcce84' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0-Baseline\001_20200901-0002_Anderson.Rangel.sql", ID: {87de47e2-f68e-4dba-a389-755112dcce84} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('87de47e2-f68e-4dba-a389-755112dcce84' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.0.0-Baseline\001_20200901-0002_Anderson.Rangel.sql", ID: {87de47e2-f68e-4dba-a389-755112dcce84} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('
PRINT N''Creating [dbo].[DM_INVOICE_LINE]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[DM_INVOICE_LINE]
(
[invoice_number] [varchar] (10) NOT NULL,
[inventory_item_id] [varchar] (10) NOT NULL,
[invoice_line_quantity] [int] NULL,
[invoice_line_sale_price] [decimal] (10, 2) NULL
)
');

GO
EXECUTE ('PRINT N''Creating primary key [PK__DM_INVOI__D69CED10B7D89B13] on [dbo].[DM_INVOICE_LINE]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[DM_INVOICE_LINE] ADD CONSTRAINT [PK__DM_INVOI__D69CED10B7D89B13] PRIMARY KEY CLUSTERED  ([invoice_number], [inventory_item_id])
');

GO
EXECUTE ('PRINT N''Creating [dbo].[DM_INVOICE_LINE_HISTORY]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[DM_INVOICE_LINE_HISTORY]
(
[identCol] [int] NOT NULL IDENTITY(1, 1),
[invoice_number] [varchar] (6) NOT NULL,
[item_id] [varchar] (6) NOT NULL,
[quantity] [int] NULL
)
');

GO
EXECUTE ('PRINT N''Creating primary key [PK__DM_INVOI__2DE3C94A82AAE2C0] on [dbo].[DM_INVOICE_LINE_HISTORY]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[DM_INVOICE_LINE_HISTORY] ADD CONSTRAINT [PK__DM_INVOI__2DE3C94A82AAE2C0] PRIMARY KEY CLUSTERED  ([identCol])
');

GO
EXECUTE ('PRINT N''Creating trigger [dbo].[IL_trig1] on [dbo].[DM_INVOICE_LINE]''
');

GO
EXECUTE ('create trigger [dbo].[IL_trig1]
on [dbo].[DM_INVOICE_LINE] after insert, update
AS
BEGIN
  DECLARE @invNum integer
  DECLARE @itemID integer
  DECLARE @itemQty integer
  Select @invNum=invoice_number, @itemID=inventory_item_id, @itemQty=invoice_line_quantity from DM_INVOICE_LINE;
  insert into DM_INVOICE_LINE_HISTORY (invoice_number,item_id,quantity) 
     values (@invNum,@itemID,@itemQty);
END
');

GO
EXECUTE ('PRINT N''Creating [dbo].[DM_EMPLOYEE]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[DM_EMPLOYEE]
(
[person_id] [int] NOT NULL,
[assignment_id] [int] NOT NULL,
[emp_id] [varchar] (50) NULL,
[first_name] [varchar] (40) NULL,
[last_name] [varchar] (40) NULL,
[full_name] [varchar] (40) NULL,
[birth_date] [datetime] NULL,
[gender] [varchar] (1) NULL,
[title] [varchar] (10) NULL,
[emp_data] [varchar] (100) NULL
)
');

GO
EXECUTE ('PRINT N''Creating index [empInd1] on [dbo].[DM_EMPLOYEE]''
');

GO
EXECUTE ('CREATE UNIQUE NONCLUSTERED INDEX [empInd1] ON [dbo].[DM_EMPLOYEE] ([person_id], [emp_id])
');

GO
EXECUTE ('PRINT N''Creating [dbo].[DM_EMP_AUDIT]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[DM_EMP_AUDIT]
(
[identCol] [int] NOT NULL IDENTITY(1, 1),
[person_id] [int] NOT NULL,
[assignment_id] [int] NOT NULL,
[emp_id] [varchar] (10) NULL,
[first_name] [varchar] (40) NULL,
[last_name] [varchar] (40) NULL,
[full_name] [varchar] (40) NULL
)
');

GO
EXECUTE ('PRINT N''Creating primary key [PK__DM_EMP_A__2DE3C94AA18F71FC] on [dbo].[DM_EMP_AUDIT]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[DM_EMP_AUDIT] ADD CONSTRAINT [PK__DM_EMP_A__2DE3C94AA18F71FC] PRIMARY KEY CLUSTERED  ([identCol])
');

GO
EXECUTE ('PRINT N''Creating trigger [dbo].[EMP_trig1] on [dbo].[DM_EMPLOYEE]''
');

GO
EXECUTE ('
create trigger [dbo].[EMP_trig1]
on [dbo].[DM_EMPLOYEE] after update
AS
BEGIN
  DECLARE @person_id integer
  DECLARE @assignment_id integer
  DECLARE @emp_id varchar(10)
  DECLARE @first_name varchar(40)
  DECLARE @last_name varchar(40)
  DECLARE @full_name varchar(40)
  Select @person_id=person_id, @assignment_id=assignment_id, @emp_id=emp_id, @first_name=first_name, @last_name=last_name, @full_name=full_name from DM_EMPLOYEE;
  insert into DM_EMP_AUDIT (person_id,assignment_id, emp_id,first_name,last_name,full_name) 
     values (@person_id,@assignment_id, @emp_id,@first_name,@last_name,@full_name);
END
');

GO
EXECUTE ('PRINT N''Creating [dbo].[DM_CUSTOMER]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[DM_CUSTOMER]
(
[customer_id] [varchar] (10) NOT NULL,
[customer_firstname] [varchar] (60) NULL,
[customer_lastname] [varchar] (60) NULL,
[customer_gender] [varchar] (1) NULL,
[customer_company_name] [varchar] (60) NULL,
[customer_street_address] [varchar] (60) NULL,
[customer_region] [varchar] (60) NULL,
[customer_country] [varchar] (60) NULL,
[customer_email] [varchar] (60) NULL,
[customer_telephone] [varchar] (60) NULL,
[customer_zipcode] [varchar] (60) NULL,
[credit_card_type_id] [varchar] (2) NULL,
[customer_credit_card_number] [varchar] (60) NULL
)
');

GO
EXECUTE ('PRINT N''Creating primary key [PK__DM_CUSTO__CD65CB85EBAB0573] on [dbo].[DM_CUSTOMER]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[DM_CUSTOMER] ADD CONSTRAINT [PK__DM_CUSTO__CD65CB85EBAB0573] PRIMARY KEY CLUSTERED  ([customer_id])
');

GO
EXECUTE ('PRINT N''Creating index [index_name] on [dbo].[DM_CUSTOMER]''
');

GO
EXECUTE ('CREATE NONCLUSTERED INDEX [index_name] ON [dbo].[DM_CUSTOMER] ([customer_street_address])
');

GO
EXECUTE ('PRINT N''Creating [dbo].[DM_CUSTOMER_NOTES]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[DM_CUSTOMER_NOTES]
(
[customer_id] [varchar] (10) NOT NULL,
[customer_firstname] [varchar] (60) NULL,
[customer_lastname] [varchar] (60) NULL,
[customer_notes_entry_date] [datetime] NOT NULL,
[customer_note] [varchar] (2000) NULL
)
');

GO
EXECUTE ('PRINT N''Creating index [cnInd1] on [dbo].[DM_CUSTOMER_NOTES]''
');

GO
EXECUTE ('CREATE UNIQUE NONCLUSTERED INDEX [cnInd1] ON [dbo].[DM_CUSTOMER_NOTES] ([customer_id], [customer_notes_entry_date])
');

GO
EXECUTE ('PRINT N''Creating [dbo].[DM_CREDIT_CARD_TYPE]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[DM_CREDIT_CARD_TYPE]
(
[credit_card_type_id] [varchar] (2) NOT NULL,
[credit_card_type_name] [varchar] (60) NULL
)
');

GO
EXECUTE ('PRINT N''Creating primary key [PK__DM_CREDI__F76530082B5BBF7D] on [dbo].[DM_CREDIT_CARD_TYPE]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[DM_CREDIT_CARD_TYPE] ADD CONSTRAINT [PK__DM_CREDI__F76530082B5BBF7D] PRIMARY KEY CLUSTERED  ([credit_card_type_id])
');

GO
EXECUTE ('PRINT N''Creating [dbo].[DM_INVOICE]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[DM_INVOICE]
(
[invoice_number] [varchar] (10) NOT NULL,
[invoice_date] [datetime] NULL,
[invoice_customer_id] [varchar] (60) NULL
)
');

GO
EXECUTE ('PRINT N''Creating primary key [PK__DM_INVOI__8081A63BC39394DD] on [dbo].[DM_INVOICE]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[DM_INVOICE] ADD CONSTRAINT [PK__DM_INVOI__8081A63BC39394DD] PRIMARY KEY CLUSTERED  ([invoice_number])
');

GO
EXECUTE ('PRINT N''Creating [dbo].[DM_INVENTORY_ITEM]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[DM_INVENTORY_ITEM]
(
[inventory_item_id] [varchar] (10) NOT NULL,
[inventory_item_name] [varchar] (60) NULL
)
');

GO
EXECUTE ('PRINT N''Creating primary key [PK__DM_INVEN__61D4B2B48522D3DF] on [dbo].[DM_INVENTORY_ITEM]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[DM_INVENTORY_ITEM] ADD CONSTRAINT [PK__DM_INVEN__61D4B2B48522D3DF] PRIMARY KEY CLUSTERED  ([inventory_item_id])
');

GO
EXECUTE ('PRINT N''Creating [dbo].[GetContacts]''
');

GO
EXECUTE ('--SET QUOTED_IDENTIFIER ON|OFF
--SET ANSI_NULLS ON|OFF
CREATE PROCEDURE [dbo].[GetContacts]
--Author:sa
--Date: 26/11/2019
--GO
    @parameter_name AS INT
-- WITH ENCRYPTION, RECOMPILE, EXECUTE AS CALLER|SELF|OWNER| ''user_name''
AS
--SET NOCOUNT ON

    SELECT	DC.customer_id,
            DC.customer_firstname,
            DC.customer_lastname,
            DC.customer_gender,
            DC.customer_company_name,
            DC.customer_street_address,
            DC.customer_region,
            DC.customer_country,
            DC.customer_email,
            DC.customer_telephone,
            DC.customer_zipcode,
            DC.credit_card_type_id,
            DC.customer_credit_card_number FROM dbo.DM_CUSTOMER AS DC
');

GO
EXECUTE ('PRINT N''Creating [dbo].[DMS_AUDITTAB]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[DMS_AUDITTAB]
(
[runid] [varchar] (100) NOT NULL,
[ruleid] [varchar] (50) NOT NULL,
[rulestatus] [char] (1) NULL,
[rulecreated] [datetime] NOT NULL,
[ruleupdated] [datetime] NULL,
[ruleblock] [int] NULL,
[rulenum] [int] NULL,
[rulesubscript] [int] NULL,
[ruletype] [varchar] (50) NULL,
[ruletarget] [varchar] (250) NULL,
[rstat1] [int] NULL,
[rstat2] [int] NULL,
[rstat3] [int] NULL,
[rstat4] [decimal] (18, 0) NULL,
[rstat5] [datetime] NULL,
[rstat6] [varchar] (50) NULL
)
');

GO
EXECUTE ('PRINT N''Creating index [IX_DMS_AUDITTAB] on [dbo].[DMS_AUDITTAB]''
');

GO
EXECUTE ('CREATE NONCLUSTERED INDEX [IX_DMS_AUDITTAB] ON [dbo].[DMS_AUDITTAB] ([runid], [ruleid])
');

GO
EXECUTE ('PRINT N''Creating [dbo].[DM_ASSIGNMENT]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[DM_ASSIGNMENT]
(
[assignment_id] [int] NOT NULL,
[person_id] [int] NOT NULL,
[emp_id] [varchar] (10) NULL,
[emp_jobtitle] [varchar] (100) NULL,
[assignment_notes] [varchar] (1000) NULL
)
');

GO
EXECUTE ('PRINT N''Creating index [asgnInd1] on [dbo].[DM_ASSIGNMENT]''
');

GO
EXECUTE ('CREATE UNIQUE NONCLUSTERED INDEX [asgnInd1] ON [dbo].[DM_ASSIGNMENT] ([person_id], [assignment_id])
');

GO
EXECUTE ('PRINT N''Creating [dbo].[DM_CUSTOMER_ASXML_IDAttr]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[DM_CUSTOMER_ASXML_IDAttr]
(
[customer_id] [varchar] (10) NOT NULL,
[customer_data] [xml] NULL
)
');

GO
EXECUTE ('PRINT N''Creating primary key [PK_DM_CUSTOMER_ASXML_IDAttr] on [dbo].[DM_CUSTOMER_ASXML_IDAttr]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[DM_CUSTOMER_ASXML_IDAttr] ADD CONSTRAINT [PK_DM_CUSTOMER_ASXML_IDAttr] PRIMARY KEY CLUSTERED  ([customer_id])
');

GO
EXECUTE ('PRINT N''Creating [dbo].[DM_CUSTOMER_CONTACTS]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[DM_CUSTOMER_CONTACTS]
(
[CONTACT_ID] [int] NOT NULL IDENTITY(1, 1),
[CONTACT_PERSON] [xml] NOT NULL CONSTRAINT [DF__DM_CUSTOM__CONTA__2F10007B] DEFAULT (''<Company />'')
)
');

GO
EXECUTE ('PRINT N''Creating primary key [PK__DM_CUSTO__99DE4258A3F94364] on [dbo].[DM_CUSTOMER_CONTACTS]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[DM_CUSTOMER_CONTACTS] ADD CONSTRAINT [PK__DM_CUSTO__99DE4258A3F94364] PRIMARY KEY CLUSTERED  ([CONTACT_ID])
');

GO
EXECUTE ('PRINT N''Creating [dbo].[DM_SUPPLIERS]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[DM_SUPPLIERS]
(
[supplier_id] [int] NOT NULL,
[supplier_name] [varchar] (60) NULL
)
');

GO
EXECUTE ('PRINT N''Creating primary key [PK__DM_SUPPL__6EE594E8AB4A022B] on [dbo].[DM_SUPPLIERS]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[DM_SUPPLIERS] ADD CONSTRAINT [PK__DM_SUPPL__6EE594E8AB4A022B] PRIMARY KEY CLUSTERED  ([supplier_id])
');

GO
EXECUTE ('PRINT N''Adding foreign keys to [dbo].[DM_CUSTOMER]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[DM_CUSTOMER] ADD CONSTRAINT [CU_FK] FOREIGN KEY ([credit_card_type_id]) REFERENCES [dbo].[DM_CREDIT_CARD_TYPE] ([credit_card_type_id])
');

GO
EXECUTE ('PRINT N''Adding foreign keys to [dbo].[DM_CUSTOMER_NOTES]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[DM_CUSTOMER_NOTES] ADD CONSTRAINT [CN_FK] FOREIGN KEY ([customer_id]) REFERENCES [dbo].[DM_CUSTOMER] ([customer_id])
');

GO
EXECUTE ('PRINT N''Adding foreign keys to [dbo].[DM_INVOICE_LINE]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[DM_INVOICE_LINE] ADD CONSTRAINT [I4_FK] FOREIGN KEY ([inventory_item_id]) REFERENCES [dbo].[DM_INVENTORY_ITEM] ([inventory_item_id])
');

GO
EXECUTE ('ALTER TABLE [dbo].[DM_INVOICE_LINE] ADD CONSTRAINT [I3_FK] FOREIGN KEY ([invoice_number]) REFERENCES [dbo].[DM_INVOICE] ([invoice_number])
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('87de47e2-f68e-4dba-a389-755112dcce84' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0-Baseline\001_20200901-0002_Anderson.Rangel.sql", ID: {87de47e2-f68e-4dba-a389-755112dcce84} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('87de47e2-f68e-4dba-a389-755112dcce84' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('87de47e2-f68e-4dba-a389-755112dcce84' AS UNIQUEIDENTIFIER), '7808BFF7EDD9F751D9D6282C81B6A9BED04DED22B20889A2BC5F9D5ACC2CE748', 'Migrations\1.0.0-Baseline\001_20200901-0002_Anderson.Rangel.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2c2be451-e657-48ed-8ba7-e1988374c08c' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.1.0-Changes\001_20200901-1034_Anderson.Rangel.sql", ID: {2c2be451-e657-48ed-8ba7-e1988374c08c} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2c2be451-e657-48ed-8ba7-e1988374c08c' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.1.0-Changes\001_20200901-1034_Anderson.Rangel.sql", ID: {2c2be451-e657-48ed-8ba7-e1988374c08c} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('
PRINT N''Dropping [dbo].[newproc]''
');

GO
EXECUTE ('IF OBJECT_ID(N''[dbo].[newproc]'', ''P'') IS NOT NULL
DROP PROCEDURE [dbo].[newproc]
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2c2be451-e657-48ed-8ba7-e1988374c08c' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.1.0-Changes\001_20200901-1034_Anderson.Rangel.sql", ID: {2c2be451-e657-48ed-8ba7-e1988374c08c} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2c2be451-e657-48ed-8ba7-e1988374c08c' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('2c2be451-e657-48ed-8ba7-e1988374c08c' AS UNIQUEIDENTIFIER), 'BFF3B651F3BDED3EE019C976B3FB8C56AA61C5E7DE85283EB67AC791C209BD24', 'Migrations\1.1.0-Changes\001_20200901-1034_Anderson.Rangel.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('69895b0b-3ac2-4be1-a916-d195969ca1a4' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.1.0-Changes\002_20200901-1349_Anderson.Rangel.sql", ID: {69895b0b-3ac2-4be1-a916-d195969ca1a4} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('69895b0b-3ac2-4be1-a916-d195969ca1a4' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.1.0-Changes\002_20200901-1349_Anderson.Rangel.sql", ID: {69895b0b-3ac2-4be1-a916-d195969ca1a4} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

SET DATEFORMAT YMD;


');

GO
EXECUTE ('IF (SELECT COUNT(*)
    FROM   [dbo].[DM_CREDIT_CARD_TYPE]) = 0
    BEGIN
        PRINT (N''Add 5 rows to [dbo].[DM_CREDIT_CARD_TYPE]'');
        INSERT  INTO [dbo].[DM_CREDIT_CARD_TYPE] ([credit_card_type_id], [credit_card_type_name])
        VALUES                                  (''1'', ''Discover'');
        INSERT  INTO [dbo].[DM_CREDIT_CARD_TYPE] ([credit_card_type_id], [credit_card_type_name])
        VALUES                                  (''2'', ''American Express'');
        INSERT  INTO [dbo].[DM_CREDIT_CARD_TYPE] ([credit_card_type_id], [credit_card_type_name])
        VALUES                                  (''3'', ''Diners Club'');
        INSERT  INTO [dbo].[DM_CREDIT_CARD_TYPE] ([credit_card_type_id], [credit_card_type_name])
        VALUES                                  (''4'', ''Master Card'');
        INSERT  INTO [dbo].[DM_CREDIT_CARD_TYPE] ([credit_card_type_id], [credit_card_type_name])
        VALUES                                  (''5'', ''VISA'');
    END


');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('69895b0b-3ac2-4be1-a916-d195969ca1a4' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.1.0-Changes\002_20200901-1349_Anderson.Rangel.sql", ID: {69895b0b-3ac2-4be1-a916-d195969ca1a4} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('69895b0b-3ac2-4be1-a916-d195969ca1a4' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('69895b0b-3ac2-4be1-a916-d195969ca1a4' AS UNIQUEIDENTIFIER), '91A229A2EA7CDC9C8F3AB5BB6CBD9F22D918090A8D471CD08E9665B34E23E444', 'Migrations\1.1.0-Changes\002_20200901-1349_Anderson.Rangel.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('dd343b50-1532-4421-8819-2b748a2c31f3' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.1.0-Changes\003_20200901-1359_Anderson.Rangel.sql", ID: {dd343b50-1532-4421-8819-2b748a2c31f3} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('dd343b50-1532-4421-8819-2b748a2c31f3' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.1.0-Changes\003_20200901-1359_Anderson.Rangel.sql", ID: {dd343b50-1532-4421-8819-2b748a2c31f3} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('
PRINT N''Creating [dbo].[Blogs]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[Blogs]
(
[BlogsID] [int] NOT NULL IDENTITY(1, 1),
[AuthorID] [int] NULL,
[Title] [char] (142) NULL,
[PublishDate] [datetime] NULL,
[Article] [nvarchar] (50) NULL
)
');

GO
EXECUTE ('PRINT N''Creating primary key [PK__Blogs__C03C1E467AEB09A9] on [dbo].[Blogs]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[Blogs] ADD CONSTRAINT [PK__Blogs__C03C1E467AEB09A9] PRIMARY KEY CLUSTERED  ([BlogsID])
');

GO
EXECUTE ('PRINT N''Creating [dbo].[BlogComments]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[BlogComments]
(
[BlogCommentsID] [int] NOT NULL IDENTITY(1, 1),
[BlogsID] [int] NOT NULL,
[CommentText] [nvarchar] (200) NULL,
[CommentDate] [datetime] NOT NULL
)
');

GO
EXECUTE ('PRINT N''Creating primary key [PK__BlogComments] on [dbo].[BlogComments]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[BlogComments] ADD CONSTRAINT [PK__BlogComments] PRIMARY KEY CLUSTERED  ([BlogCommentsID])
');

GO
EXECUTE ('PRINT N''Creating [dbo].[CountryCodes]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[CountryCodes]
(
[CountryName] [nvarchar] (255) NULL,
[CountryCode] [nvarchar] (4) NOT NULL
)
');

GO
EXECUTE ('PRINT N''Creating primary key [PK_Countries] on [dbo].[CountryCodes]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[CountryCodes] ADD CONSTRAINT [PK_Countries] PRIMARY KEY CLUSTERED  ([CountryCode])
');

GO
EXECUTE ('PRINT N''Creating [dbo].[Contacts]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[Contacts]
(
[ContactsID] [int] NOT NULL IDENTITY(1, 1),
[ContactFullName] [nvarchar] (100) NOT NULL,
[PhoneWork] [nvarchar] (25) NULL,
[PhoneMobile] [nvarchar] (25) NULL,
[Address1] [nvarchar] (128) NULL,
[Address2] [nvarchar] (128) NULL,
[Address3] [nvarchar] (128) NULL,
[CountryCode] [nvarchar] (4) NULL CONSTRAINT [DF__Contacts__Countr__117F9D94] DEFAULT (N''US''),
[JoiningDate] [datetime] NULL CONSTRAINT [DF__Contacts__Joinin__1273C1CD] DEFAULT (getdate()),
[ModifiedDate] [datetime] NULL,
[Email] [nvarchar] (256) NULL,
[Photo] [image] NULL,
[LinkedIn] [nvarchar] (128) NULL
)
');

GO
EXECUTE ('PRINT N''Creating primary key [PK__Contacts__912F378B7C53D1A0] on [dbo].[Contacts]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[Contacts] ADD CONSTRAINT [PK__Contacts__912F378B7C53D1A0] PRIMARY KEY CLUSTERED  ([ContactsID])
');

GO
EXECUTE ('PRINT N''Creating [dbo].[Articles]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[Articles]
(
[ArticlesID] [int] NOT NULL IDENTITY(1, 1),
[AuthorID] [int] NULL,
[Title] [char] (142) NULL,
[Description] [varchar] (max) NULL,
[Article] [varchar] (max) NULL,
[PublishDate] [datetime] NULL,
[ModifiedDate] [datetime] NULL,
[URL] [char] (200) NULL,
[Comments] [int] NULL
)
');

GO
EXECUTE ('PRINT N''Creating primary key [PK_Article] on [dbo].[Articles]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[Articles] ADD CONSTRAINT [PK_Article] PRIMARY KEY CLUSTERED  ([ArticlesID])
');

GO
EXECUTE ('PRINT N''Creating [dbo].[ArticleDescriptions]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[ArticleDescriptions]
(
[ArticlesID] [int] NOT NULL IDENTITY(1, 1),
[ShortDescription] [nvarchar] (2000) NULL,
[Description] [text] NULL,
[ArticlesName] [varchar] (50) NULL,
[Picture] [image] NULL
)
');

GO
EXECUTE ('PRINT N''Creating primary key [PK_ArticleDescriptions] on [dbo].[ArticleDescriptions]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[ArticleDescriptions] ADD CONSTRAINT [PK_ArticleDescriptions] PRIMARY KEY CLUSTERED  ([ArticlesID])
');

GO
EXECUTE ('PRINT N''Creating [dbo].[ArticlePrices]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[ArticlePrices]
(
[ArticlePricesID] [int] NOT NULL IDENTITY(1, 1),
[ArticlesID] [int] NULL,
[Price] [money] NULL,
[ValidFrom] [datetime] NULL CONSTRAINT [DF__ArticlePr__Valid__1CF15040] DEFAULT (getdate()),
[ValidTo] [datetime] NULL,
[Active] [char] (1) NULL CONSTRAINT [DF__ArticlePr__Activ__1DE57479] DEFAULT (''N''),
[SalesPrice] [char] (1) NULL
)
');

GO
EXECUTE ('PRINT N''Creating primary key [PK_ArticlePrices] on [dbo].[ArticlePrices]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[ArticlePrices] ADD CONSTRAINT [PK_ArticlePrices] PRIMARY KEY CLUSTERED  ([ArticlePricesID])
');

GO
EXECUTE ('PRINT N''Creating index [IX_ArticlePrices] on [dbo].[ArticlePrices]''
');

GO
EXECUTE ('CREATE NONCLUSTERED INDEX [IX_ArticlePrices] ON [dbo].[ArticlePrices] ([ArticlesID])
');

GO
EXECUTE ('PRINT N''Creating index [IX_ArticlePrices_1] on [dbo].[ArticlePrices]''
');

GO
EXECUTE ('CREATE NONCLUSTERED INDEX [IX_ArticlePrices_1] ON [dbo].[ArticlePrices] ([ValidFrom])
');

GO
EXECUTE ('PRINT N''Creating index [IX_ArticlePrices_2] on [dbo].[ArticlePrices]''
');

GO
EXECUTE ('CREATE NONCLUSTERED INDEX [IX_ArticlePrices_2] ON [dbo].[ArticlePrices] ([ValidTo])
');

GO
EXECUTE ('PRINT N''Creating [dbo].[ArticleReferences]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[ArticleReferences]
(
[ArticlesID] [int] NOT NULL IDENTITY(1, 1),
[Reference] [varchar] (50) NULL
)
');

GO
EXECUTE ('PRINT N''Creating primary key [PK_ArticleReferences] on [dbo].[ArticleReferences]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[ArticleReferences] ADD CONSTRAINT [PK_ArticleReferences] PRIMARY KEY CLUSTERED  ([ArticlesID])
');

GO
EXECUTE ('PRINT N''Creating [dbo].[RSSFeeds]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[RSSFeeds]
(
[RSSFeedID] [int] NOT NULL IDENTITY(1, 1),
[FeedName] [varchar] (max) NULL,
[Checked] [bit] NULL,
[FeedBurner] [bit] NOT NULL
)
');

GO
EXECUTE ('PRINT N''Creating primary key [PK__RSSFeeds__DF1690F2C1F77AC5] on [dbo].[RSSFeeds]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[RSSFeeds] ADD CONSTRAINT [PK__RSSFeeds__DF1690F2C1F77AC5] PRIMARY KEY CLUSTERED  ([RSSFeedID])
');

GO
EXECUTE ('PRINT N''Creating [dbo].[ArticlePurchases]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[ArticlePurchases]
(
[ArticlePurchasesID] [int] NOT NULL IDENTITY(1, 1),
[ArticlePricesID] [int] NOT NULL,
[Quantity] [int] NOT NULL CONSTRAINT [DF__ArticlePu__Quant__22AA2996] DEFAULT ((1)),
[InvoiceNumber] [nvarchar] (20) NULL,
[PurchaseDate] [datetime] NOT NULL
)
');

GO
EXECUTE ('PRINT N''Creating primary key [PK_ArticlePurchases] on [dbo].[ArticlePurchases]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[ArticlePurchases] ADD CONSTRAINT [PK_ArticlePurchases] PRIMARY KEY CLUSTERED  ([ArticlePurchasesID])
');

GO
EXECUTE ('PRINT N''Creating [dbo].[PersonData]''
');

GO
EXECUTE ('CREATE TABLE [dbo].[PersonData]
(
[ID] [int] NOT NULL IDENTITY(1, 1),
[NAME] [nvarchar] (200) NOT NULL,
[Email1] [nvarchar] (200) NULL,
[Email2] [nvarchar] (200) NULL,
[Phone1] [nvarchar] (100) NULL,
[Phone2] [nvarchar] (100) NULL,
[Street1] [nvarchar] (200) NULL,
[City1] [nvarchar] (200) NULL,
[StateProvince1] [nvarchar] (50) NULL,
[PostalCode1] [nvarchar] (50) NULL,
[Street2] [nvarchar] (200) NULL,
[City2] [nvarchar] (200) NULL,
[StateProvince2] [nvarchar] (50) NULL,
[PostalCode2] [nvarchar] (50) NULL
)
');

GO
EXECUTE ('PRINT N''Creating primary key [PK__PersonDa__3214EC27CA5DC9C3] on [dbo].[PersonData]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[PersonData] ADD CONSTRAINT [PK__PersonDa__3214EC27CA5DC9C3] PRIMARY KEY CLUSTERED  ([ID])
');

GO
EXECUTE ('PRINT N''Adding foreign keys to [dbo].[ArticleDescriptions]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[ArticleDescriptions] ADD CONSTRAINT [FK_ArticleDescriptions] FOREIGN KEY ([ArticlesID]) REFERENCES [dbo].[Articles] ([ArticlesID])
');

GO
EXECUTE ('PRINT N''Adding foreign keys to [dbo].[ArticlePrices]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[ArticlePrices] ADD CONSTRAINT [FK_ArticlePrices] FOREIGN KEY ([ArticlesID]) REFERENCES [dbo].[Articles] ([ArticlesID])
');

GO
EXECUTE ('PRINT N''Adding foreign keys to [dbo].[ArticleReferences]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[ArticleReferences] ADD CONSTRAINT [FK_Articles] FOREIGN KEY ([ArticlesID]) REFERENCES [dbo].[Articles] ([ArticlesID])
');

GO
EXECUTE ('PRINT N''Adding foreign keys to [dbo].[Articles]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[Articles] ADD CONSTRAINT [FK_Author] FOREIGN KEY ([AuthorID]) REFERENCES [dbo].[Contacts] ([ContactsID])
');

GO
EXECUTE ('PRINT N''Adding foreign keys to [dbo].[BlogComments]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[BlogComments] ADD CONSTRAINT [FK__BlogComments] FOREIGN KEY ([BlogsID]) REFERENCES [dbo].[Blogs] ([BlogsID])
');

GO
EXECUTE ('PRINT N''Adding foreign keys to [dbo].[Blogs]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[Blogs] ADD CONSTRAINT [FK_BlogAuthor] FOREIGN KEY ([AuthorID]) REFERENCES [dbo].[Contacts] ([ContactsID])
');

GO
EXECUTE ('PRINT N''Adding foreign keys to [dbo].[Contacts]''
');

GO
EXECUTE ('ALTER TABLE [dbo].[Contacts] ADD CONSTRAINT [FK__Contacts__Countr__145C0A3F] FOREIGN KEY ([CountryCode]) REFERENCES [dbo].[CountryCodes] ([CountryCode])
');

GO
EXECUTE ('PRINT N''Creating extended properties''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''A short summary of the article appearing on the main Simple Talk page'', ''SCHEMA'', N''dbo'', ''TABLE'', N''ArticleDescriptions'', NULL, NULL
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Deprecated - do not use'', ''SCHEMA'', N''dbo'', ''TABLE'', N''ArticleDescriptions'', ''COLUMN'', N''ArticlesName''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Deprecated - do not use'', ''SCHEMA'', N''dbo'', ''TABLE'', N''ArticleDescriptions'', ''COLUMN'', N''Description''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Deprecated - do not use'', ''SCHEMA'', N''dbo'', ''TABLE'', N''ArticleDescriptions'', ''COLUMN'', N''Picture''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The description that appears on the main web page'', ''SCHEMA'', N''dbo'', ''TABLE'', N''ArticleDescriptions'', ''COLUMN'', N''ShortDescription''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''How much was paid for the article'', ''SCHEMA'', N''dbo'', ''TABLE'', N''ArticlePrices'', NULL, NULL
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''References listed in an article'', ''SCHEMA'', N''dbo'', ''TABLE'', N''ArticleReferences'', NULL, NULL
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Table of Simple Talk articles'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Articles'', NULL, NULL
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The actual article content'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Articles'', ''COLUMN'', N''Article''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The number of reader comments for a given article'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Articles'', ''COLUMN'', N''Comments''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''A short description of the article going between the title and "read more"'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Articles'', ''COLUMN'', N''Description''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''When the article was last modified'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Articles'', ''COLUMN'', N''ModifiedDate''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''When the article was published'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Articles'', ''COLUMN'', N''PublishDate''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The main title - appears on main web page as well as heading the article page'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Articles'', ''COLUMN'', N''Title''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The hyperlink when the title or "read more" is clicked'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Articles'', ''COLUMN'', N''URL''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Comments made by readers'', ''SCHEMA'', N''dbo'', ''TABLE'', N''BlogComments'', NULL, NULL
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The date the comment was made'', ''SCHEMA'', N''dbo'', ''TABLE'', N''BlogComments'', ''COLUMN'', N''CommentDate''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The text for the comment'', ''SCHEMA'', N''dbo'', ''TABLE'', N''BlogComments'', ''COLUMN'', N''CommentText''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Blog posts made by Simple Talk members'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Blogs'', NULL, NULL
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Authors link back to the Contacts table'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Blogs'', ''COLUMN'', N''AuthorID''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Date the Blog was published'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Blogs'', ''COLUMN'', N''PublishDate''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Title of a Blog'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Blogs'', ''COLUMN'', N''Title''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''A list of all Simple Talk members, including authors, bloggers, and any other member or contributor'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Contacts'', NULL, NULL
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Contact name'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Contacts'', ''COLUMN'', N''ContactFullName''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Country for the given address'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Contacts'', ''COLUMN'', N''CountryCode''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Contact email address'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Contacts'', ''COLUMN'', N''Email''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''When the contact joined Simple Talk'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Contacts'', ''COLUMN'', N''JoiningDate''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''When the contact details were last modified'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Contacts'', ''COLUMN'', N''ModifiedDate''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Photo of contact, especially authors.
This is now deprecated as the photos are saved as image files outside of the database.'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Contacts'', ''COLUMN'', N''Photo''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''A list of country codes 
ISO 3166-1-alpha-2 code
http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm'', ''SCHEMA'', N''dbo'', ''TABLE'', N''CountryCodes'', NULL, NULL
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''In theory shouldn''''t need more than two characters'', ''SCHEMA'', N''dbo'', ''TABLE'', N''CountryCodes'', ''COLUMN'', N''CountryCode''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''A feature to create a custom RSS feed'', ''SCHEMA'', N''dbo'', ''TABLE'', N''RSSFeeds'', NULL, NULL
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Whether checked by default on the list offered to users'', ''SCHEMA'', N''dbo'', ''TABLE'', N''RSSFeeds'', ''COLUMN'', N''Checked''
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Eg, SQL, .NET, SysAdmin, Opinion etc.'', ''SCHEMA'', N''dbo'', ''TABLE'', N''RSSFeeds'', ''COLUMN'', N''FeedName''
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('dd343b50-1532-4421-8819-2b748a2c31f3' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.1.0-Changes\003_20200901-1359_Anderson.Rangel.sql", ID: {dd343b50-1532-4421-8819-2b748a2c31f3} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('dd343b50-1532-4421-8819-2b748a2c31f3' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('dd343b50-1532-4421-8819-2b748a2c31f3' AS UNIQUEIDENTIFIER), '4750C7FAC920A6C8F83B72D3EAFE824E57CCFC1CFEF751410441319365BB3C05', 'Migrations\1.1.0-Changes\003_20200901-1359_Anderson.Rangel.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a1a64e2d-f9fc-44e8-8776-a28802659c9f' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.1.0-Changes\004_20200901-1400_Anderson.Rangel.sql", ID: {a1a64e2d-f9fc-44e8-8776-a28802659c9f} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a1a64e2d-f9fc-44e8-8776-a28802659c9f' AS UNIQUEIDENTIFIER))
BEGIN
  PRINT '----- Skipping "Migrations\1.1.0-Changes\004_20200901-1400_Anderson.Rangel.sql", ID: {a1a64e2d-f9fc-44e8-8776-a28802659c9f} as it has already been run on this database';
  SET NOEXEC ON;
END

GO
EXECUTE ('

SET DATEFORMAT YMD;


');

GO
EXECUTE ('IF (SELECT COUNT(*)
    FROM   [dbo].[RSSFeeds]) = 0
    BEGIN
        PRINT (N''Add 4 rows to [dbo].[RSSFeeds]'');
        SET IDENTITY_INSERT [dbo].[RSSFeeds] ON;
        INSERT  INTO [dbo].[RSSFeeds] ([RSSFeedID], [FeedName], [Checked], [FeedBurner])
        VALUES                       (1, ''SQL'', 1, 0);
        INSERT  INTO [dbo].[RSSFeeds] ([RSSFeedID], [FeedName], [Checked], [FeedBurner])
        VALUES                       (2, ''.NET'', 1, 1);
        INSERT  INTO [dbo].[RSSFeeds] ([RSSFeedID], [FeedName], [Checked], [FeedBurner])
        VALUES                       (3, ''SysAdmin'', 1, 0);
        INSERT  INTO [dbo].[RSSFeeds] ([RSSFeedID], [FeedName], [Checked], [FeedBurner])
        VALUES                       (4, ''Opinion'', 1, 1);
        SET IDENTITY_INSERT [dbo].[RSSFeeds] OFF;
    END


');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a1a64e2d-f9fc-44e8-8776-a28802659c9f' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.1.0-Changes\004_20200901-1400_Anderson.Rangel.sql", ID: {a1a64e2d-f9fc-44e8-8776-a28802659c9f} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a1a64e2d-f9fc-44e8-8776-a28802659c9f' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('a1a64e2d-f9fc-44e8-8776-a28802659c9f' AS UNIQUEIDENTIFIER), 'CDAD9C05B7DE2C3DE321686347C80FD8D768E0B163254A6C9ACBE18425851833', 'Migrations\1.1.0-Changes\004_20200901-1400_Anderson.Rangel.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0f8695ea-5895-520c-9d2c-a7a44293fe3a' AS UNIQUEIDENTIFIER) AND [script_checksum] = '62228A6EFE5DA325CF767BFB2BB2F8C9A45EBD301A8DF505A0087EE086894873')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Functions\calculateEstimateOfReadingTime.sql", ID: {0f8695ea-5895-520c-9d2c-a7a44293fe3a} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0f8695ea-5895-520c-9d2c-a7a44293fe3a' AS UNIQUEIDENTIFIER) AND [script_checksum] = '62228A6EFE5DA325CF767BFB2BB2F8C9A45EBD301A8DF505A0087EE086894873')
BEGIN
  PRINT '----- Skipping "Programmable Objects\dbo\Functions\calculateEstimateOfReadingTime.sql", ID: {0f8695ea-5895-520c-9d2c-a7a44293fe3a} as there are no changes to deploy';
  SET NOEXEC ON;
END

GO
EXECUTE ('IF OBJECT_ID(''[dbo].[calculateEstimateOfReadingTime]'') IS NOT NULL
	DROP FUNCTION [dbo].[calculateEstimateOfReadingTime];

');

GO
SET QUOTED_IDENTIFIER ON

GO
SET ANSI_NULLS ON

GO
EXECUTE ('-- This is a much more accurate function
CREATE FUNCTION [dbo].[calculateEstimateOfReadingTime] ( @value VARCHAR(MAX) )
RETURNS INT
    BEGIN
        DECLARE @ret AS INT = 1 ,
            @i AS INT = 1;
        WHILE @i <= LEN(@value) 
            BEGIN
                IF SUBSTRING(@value, @i, 1) = '' '' 
                    BEGIN
                        SET @ret = @ret + 1;
                    END
                SET @i = @i + 1;
            END  
        RETURN @ret / 250;
    END
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Function to estimate how long an average reader will take to read an article based on its length.
This is infomation that will be displayed alongside the article summary on the main Simple Talk home page.
Research indicates that an average person can read 250 words in a minute.'', ''SCHEMA'', N''dbo'', ''FUNCTION'', N''calculateEstimateOfReadingTime'', NULL, NULL
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The article text'', ''SCHEMA'', N''dbo'', ''FUNCTION'', N''calculateEstimateOfReadingTime'', ''PARAMETER'', N''@value''
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0f8695ea-5895-520c-9d2c-a7a44293fe3a' AS UNIQUEIDENTIFIER) AND [script_checksum] = '62228A6EFE5DA325CF767BFB2BB2F8C9A45EBD301A8DF505A0087EE086894873')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Functions\calculateEstimateOfReadingTime.sql", ID: {0f8695ea-5895-520c-9d2c-a7a44293fe3a} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0f8695ea-5895-520c-9d2c-a7a44293fe3a' AS UNIQUEIDENTIFIER) AND [script_checksum] = '62228A6EFE5DA325CF767BFB2BB2F8C9A45EBD301A8DF505A0087EE086894873')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('0f8695ea-5895-520c-9d2c-a7a44293fe3a' AS UNIQUEIDENTIFIER), '62228A6EFE5DA325CF767BFB2BB2F8C9A45EBD301A8DF505A0087EE086894873', 'Programmable Objects\dbo\Functions\calculateEstimateOfReadingTime.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('912c82cd-bd4b-519b-bb52-4faebd519829' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9DCBAD29D7429335C8833743F77295D8A8BF6DD35DFAC1C26208614860F7BEAA')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Views\v_Articles.sql", ID: {912c82cd-bd4b-519b-bb52-4faebd519829} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('912c82cd-bd4b-519b-bb52-4faebd519829' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9DCBAD29D7429335C8833743F77295D8A8BF6DD35DFAC1C26208614860F7BEAA')
BEGIN
  PRINT '----- Skipping "Programmable Objects\dbo\Views\v_Articles.sql", ID: {912c82cd-bd4b-519b-bb52-4faebd519829} as there are no changes to deploy';
  SET NOEXEC ON;
END

GO
EXECUTE ('IF OBJECT_ID(''[dbo].[v_Articles]'') IS NOT NULL
	DROP VIEW [dbo].[v_Articles];

');

GO
SET QUOTED_IDENTIFIER ON

GO
SET ANSI_NULLS ON

GO
EXECUTE ('/* This view gets called from the ST web app to show the articles */
CREATE VIEW [dbo].[v_Articles]
AS
    SELECT  TOP 250 a.[Title] ,
            a.[PublishDate] ,
            a.[Description] ,
            a.[URL] ,
            a.[Comments], 
			dbo.calculateEstimateOfReadingTime(a.Article) AS readingTime,
            c.[ContactFullName] ,
			c.[Photo],
			cc.CountryCode,
			cc.CountryName
    FROM    Articles a
		        LEFT JOIN Contacts c ON a.AuthorID = c.ContactsID
			LEFT JOIN dbo.CountryCodes cc ON c.CountryCode = cc.Countrycode
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''This is the view that is called from the web application to display the articles on the main Simple Talk website'', ''SCHEMA'', N''dbo'', ''VIEW'', N''v_Articles'', NULL, NULL
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Note: photos are no longer pulled from the database.'', ''SCHEMA'', N''dbo'', ''VIEW'', N''v_Articles'', ''COLUMN'', N''Photo''
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('912c82cd-bd4b-519b-bb52-4faebd519829' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9DCBAD29D7429335C8833743F77295D8A8BF6DD35DFAC1C26208614860F7BEAA')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Views\v_Articles.sql", ID: {912c82cd-bd4b-519b-bb52-4faebd519829} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('912c82cd-bd4b-519b-bb52-4faebd519829' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9DCBAD29D7429335C8833743F77295D8A8BF6DD35DFAC1C26208614860F7BEAA')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('912c82cd-bd4b-519b-bb52-4faebd519829' AS UNIQUEIDENTIFIER), '9DCBAD29D7429335C8833743F77295D8A8BF6DD35DFAC1C26208614860F7BEAA', 'Programmable Objects\dbo\Views\v_Articles.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c034329f-ca65-5250-9245-fcf157d4a4ff' AS UNIQUEIDENTIFIER) AND [script_checksum] = '3098AD3716AE091E62984818305AAEF3C3130195D22251EFB48E60E0D9CC53B4')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Functions\ntsh.sql", ID: {c034329f-ca65-5250-9245-fcf157d4a4ff} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c034329f-ca65-5250-9245-fcf157d4a4ff' AS UNIQUEIDENTIFIER) AND [script_checksum] = '3098AD3716AE091E62984818305AAEF3C3130195D22251EFB48E60E0D9CC53B4')
BEGIN
  PRINT '----- Skipping "Programmable Objects\dbo\Functions\ntsh.sql", ID: {c034329f-ca65-5250-9245-fcf157d4a4ff} as there are no changes to deploy';
  SET NOEXEC ON;
END

GO
EXECUTE ('IF OBJECT_ID(''[dbo].[ntsh]'') IS NOT NULL
	DROP FUNCTION [dbo].[ntsh];

');

GO
SET QUOTED_IDENTIFIER ON

GO
SET ANSI_NULLS ON

GO
EXECUTE ('/* This "nothing to see here" function does nothing but slow down v_Articles */
CREATE FUNCTION [dbo].[ntsh] (@x INT, @n INT)
RETURNS INT
WITH SCHEMABINDING AS
BEGIN
  DECLARE @retval AS INT;

	DECLARE @i INT = 0
-- Set i to 100 or greater to slow v_Articles to >100ms
	WHILE @i < @n
		BEGIN
			SET @i = @i + 1;
		END
	SET @retval = @x;

  RETURN @retval ;
END;
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''This used to deliberately slow down the loading of the articles view, but is now deprecated.
The inefficient version of dbo.calculateEstimateOfReadingTime function achieves the same.'', ''SCHEMA'', N''dbo'', ''FUNCTION'', N''ntsh'', NULL, NULL
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c034329f-ca65-5250-9245-fcf157d4a4ff' AS UNIQUEIDENTIFIER) AND [script_checksum] = '3098AD3716AE091E62984818305AAEF3C3130195D22251EFB48E60E0D9CC53B4')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Functions\ntsh.sql", ID: {c034329f-ca65-5250-9245-fcf157d4a4ff} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c034329f-ca65-5250-9245-fcf157d4a4ff' AS UNIQUEIDENTIFIER) AND [script_checksum] = '3098AD3716AE091E62984818305AAEF3C3130195D22251EFB48E60E0D9CC53B4')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('c034329f-ca65-5250-9245-fcf157d4a4ff' AS UNIQUEIDENTIFIER), '3098AD3716AE091E62984818305AAEF3C3130195D22251EFB48E60E0D9CC53B4', 'Programmable Objects\dbo\Functions\ntsh.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('60647e42-acb6-53c8-9852-426fc1495cea' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'F82C6EB07A39FDA2E937A5D7A48FC6F0A03637463E6E96F73DCD3B4295A043FD')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Functions\ufnGetBlogInformation.sql", ID: {60647e42-acb6-53c8-9852-426fc1495cea} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('60647e42-acb6-53c8-9852-426fc1495cea' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'F82C6EB07A39FDA2E937A5D7A48FC6F0A03637463E6E96F73DCD3B4295A043FD')
BEGIN
  PRINT '----- Skipping "Programmable Objects\dbo\Functions\ufnGetBlogInformation.sql", ID: {60647e42-acb6-53c8-9852-426fc1495cea} as there are no changes to deploy';
  SET NOEXEC ON;
END

GO
EXECUTE ('IF OBJECT_ID(''[dbo].[ufnGetBlogInformation]'') IS NOT NULL
	DROP FUNCTION [dbo].[ufnGetBlogInformation];

');

GO
SET QUOTED_IDENTIFIER ON

GO
SET ANSI_NULLS ON

GO
EXECUTE ('CREATE FUNCTION [dbo].[ufnGetBlogInformation] (@Contact INT)
RETURNS @retBlogInformation TABLE (-- Columns returned by the function
                                   [AuthorID] INT NOT NULL,
                                   [Title] [nvarchar](50) NULL)
AS 

BEGIN
    INSERT  INTO @retBlogInformation
            SELECT  AuthorID, Title
            FROM    dbo.Blogs
            WHERE   AuthorID=@Contact

    RETURN
END
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''This function returns a table with basic infomation pulled from the Blogs table'', ''SCHEMA'', N''dbo'', ''FUNCTION'', N''ufnGetBlogInformation'', NULL, NULL
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('60647e42-acb6-53c8-9852-426fc1495cea' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'F82C6EB07A39FDA2E937A5D7A48FC6F0A03637463E6E96F73DCD3B4295A043FD')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Functions\ufnGetBlogInformation.sql", ID: {60647e42-acb6-53c8-9852-426fc1495cea} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('60647e42-acb6-53c8-9852-426fc1495cea' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'F82C6EB07A39FDA2E937A5D7A48FC6F0A03637463E6E96F73DCD3B4295A043FD')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('60647e42-acb6-53c8-9852-426fc1495cea' AS UNIQUEIDENTIFIER), 'F82C6EB07A39FDA2E937A5D7A48FC6F0A03637463E6E96F73DCD3B4295A043FD', 'Programmable Objects\dbo\Functions\ufnGetBlogInformation.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9170f158-c470-5b3f-8c5e-735a4c2f9ba4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '764FB99F8A6B685E4A0ABDCFCDAE6D4F66FA2E8B5AF566D33FAF956E81AA1253')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\GetContacts.sql", ID: {9170f158-c470-5b3f-8c5e-735a4c2f9ba4} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9170f158-c470-5b3f-8c5e-735a4c2f9ba4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '764FB99F8A6B685E4A0ABDCFCDAE6D4F66FA2E8B5AF566D33FAF956E81AA1253')
BEGIN
  PRINT '----- Skipping "Programmable Objects\dbo\Stored Procedures\GetContacts.sql", ID: {9170f158-c470-5b3f-8c5e-735a4c2f9ba4} as there are no changes to deploy';
  SET NOEXEC ON;
END

GO
EXECUTE ('IF OBJECT_ID(''[dbo].[GetContacts]'') IS NOT NULL
	DROP PROCEDURE [dbo].[GetContacts];

');

GO
SET QUOTED_IDENTIFIER ON

GO
SET ANSI_NULLS ON

GO
EXECUTE ('--SET QUOTED_IDENTIFIER ON|OFF
--SET ANSI_NULLS ON|OFF
CREATE PROCEDURE [dbo].[GetContacts]
--Author:sa
--Date: 26/11/2019
--GO
    @parameter_name AS INT
-- WITH ENCRYPTION, RECOMPILE, EXECUTE AS CALLER|SELF|OWNER| ''user_name''
AS
--SET NOCOUNT ON

    SELECT	DC.customer_id,
            DC.customer_firstname,
            DC.customer_lastname,
            DC.customer_gender,
            DC.customer_company_name,
            DC.customer_street_address,
            DC.customer_region,
            DC.customer_country,
            DC.customer_email,
            DC.customer_telephone,
            DC.customer_zipcode,
            DC.credit_card_type_id,
            DC.customer_credit_card_number FROM dbo.DM_CUSTOMER AS DC
			--v3
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9170f158-c470-5b3f-8c5e-735a4c2f9ba4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '764FB99F8A6B685E4A0ABDCFCDAE6D4F66FA2E8B5AF566D33FAF956E81AA1253')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\GetContacts.sql", ID: {9170f158-c470-5b3f-8c5e-735a4c2f9ba4} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9170f158-c470-5b3f-8c5e-735a4c2f9ba4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '764FB99F8A6B685E4A0ABDCFCDAE6D4F66FA2E8B5AF566D33FAF956E81AA1253')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('9170f158-c470-5b3f-8c5e-735a4c2f9ba4' AS UNIQUEIDENTIFIER), '764FB99F8A6B685E4A0ABDCFCDAE6D4F66FA2E8B5AF566D33FAF956E81AA1253', 'Programmable Objects\dbo\Stored Procedures\GetContacts.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8450b921-a90d-56cc-9f93-ffac1ab67969' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8E9DE0CA8672CD2EE0BAFDD3D8C9F188F7DB03D8BC944312A72937DDBF87CF44')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\prcAddBlog.sql", ID: {8450b921-a90d-56cc-9f93-ffac1ab67969} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8450b921-a90d-56cc-9f93-ffac1ab67969' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8E9DE0CA8672CD2EE0BAFDD3D8C9F188F7DB03D8BC944312A72937DDBF87CF44')
BEGIN
  PRINT '----- Skipping "Programmable Objects\dbo\Stored Procedures\prcAddBlog.sql", ID: {8450b921-a90d-56cc-9f93-ffac1ab67969} as there are no changes to deploy';
  SET NOEXEC ON;
END

GO
EXECUTE ('IF OBJECT_ID(''[dbo].[prcAddBlog]'') IS NOT NULL
	DROP PROCEDURE [dbo].[prcAddBlog];

');

GO
SET QUOTED_IDENTIFIER ON

GO
SET ANSI_NULLS ON

GO
EXECUTE ('CREATE PROCEDURE [dbo].[prcAddBlog]
    @Author VARCHAR(30),
    @Title VARCHAR(142) = NULL,
    @Article VARCHAR(MAX) = NULL
    WITH EXECUTE AS CALLER
AS
BEGIN

    INSERT  INTO dbo.Blogs (AuthorID, Title, Article, PublishDate)
    VALUES  (@Author, @Title, @Article, GETDATE())
        
        
END;
--V9
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Procedure to add a new blog post to Simple Talk'', ''SCHEMA'', N''dbo'', ''PROCEDURE'', N''prcAddBlog'', NULL, NULL
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8450b921-a90d-56cc-9f93-ffac1ab67969' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8E9DE0CA8672CD2EE0BAFDD3D8C9F188F7DB03D8BC944312A72937DDBF87CF44')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\prcAddBlog.sql", ID: {8450b921-a90d-56cc-9f93-ffac1ab67969} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8450b921-a90d-56cc-9f93-ffac1ab67969' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8E9DE0CA8672CD2EE0BAFDD3D8C9F188F7DB03D8BC944312A72937DDBF87CF44')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('8450b921-a90d-56cc-9f93-ffac1ab67969' AS UNIQUEIDENTIFIER), '8E9DE0CA8672CD2EE0BAFDD3D8C9F188F7DB03D8BC944312A72937DDBF87CF44', 'Programmable Objects\dbo\Stored Procedures\prcAddBlog.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('517d80ee-5507-580c-b473-c552899fcf99' AS UNIQUEIDENTIFIER) AND [script_checksum] = '6014BA3B4469B0402384A9ED6AA84655796EEECE652305899D981C58B1904A6F')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\prcAddContact.sql", ID: {517d80ee-5507-580c-b473-c552899fcf99} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('517d80ee-5507-580c-b473-c552899fcf99' AS UNIQUEIDENTIFIER) AND [script_checksum] = '6014BA3B4469B0402384A9ED6AA84655796EEECE652305899D981C58B1904A6F')
BEGIN
  PRINT '----- Skipping "Programmable Objects\dbo\Stored Procedures\prcAddContact.sql", ID: {517d80ee-5507-580c-b473-c552899fcf99} as there are no changes to deploy';
  SET NOEXEC ON;
END

GO
EXECUTE ('IF OBJECT_ID(''[dbo].[prcAddContact]'') IS NOT NULL
	DROP PROCEDURE [dbo].[prcAddContact];

');

GO
SET QUOTED_IDENTIFIER ON

GO
SET ANSI_NULLS ON

GO
EXECUTE ('/* 
Sample execution: 
EXEC [prcAddContact] ''david'', ''12345'', ''23456'', ''152 Riverside Place'', ''Cambridge'', '''', ''feedback@red-gate.com'', NULL
*/

CREATE PROCEDURE [dbo].[prcAddContact]   @ContactFullName VARCHAR(30),
										 @PhoneWork VARCHAR(30) = NULL,
										 @PhoneMobile VARCHAR(30) = NULL,
										 @Address1 VARCHAR(30) = NULL,
										 @Address2 VARCHAR(30) = NULL,
										 @Address3 VARCHAR(30) = NULL,
										 @Email VARCHAR(30) = NULL,
										 @JoiningDate DATETIME = NULL

WITH EXECUTE AS CALLER
AS
BEGIN

INSERT INTO dbo.Contacts
        ( ContactFullName ,
          PhoneWork ,
          PhoneMobile ,
          Address1 ,
          Address2 ,
          Address3 ,
          JoiningDate ,
          ModifiedDate ,
          Email
        )
VALUES  ( @ContactFullName , -- ContactFullName - nvarchar(100)
         @PhoneWork , -- PhoneWork - nvarchar(25)
         @PhoneMobile , -- PhoneMobile - nvarchar(25)
         @Address1 , -- Address1 - nvarchar(128)
         @Address2 , -- Address2 - nvarchar(128)
         @Address3 , -- Address3 - nvarchar(128)
          @JoiningDate , -- JoiningDate - datetime, e.g. ''2012-01-17 11:42:45'' 
          GETDATE() , -- ModifiedDate - datetime
          @Email  -- Email - nvarchar(256)
        )
        
        
        END;
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Add a new contact to the Simple Talk community'', ''SCHEMA'', N''dbo'', ''PROCEDURE'', N''prcAddContact'', NULL, NULL
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('517d80ee-5507-580c-b473-c552899fcf99' AS UNIQUEIDENTIFIER) AND [script_checksum] = '6014BA3B4469B0402384A9ED6AA84655796EEECE652305899D981C58B1904A6F')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\prcAddContact.sql", ID: {517d80ee-5507-580c-b473-c552899fcf99} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('517d80ee-5507-580c-b473-c552899fcf99' AS UNIQUEIDENTIFIER) AND [script_checksum] = '6014BA3B4469B0402384A9ED6AA84655796EEECE652305899D981C58B1904A6F')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('517d80ee-5507-580c-b473-c552899fcf99' AS UNIQUEIDENTIFIER), '6014BA3B4469B0402384A9ED6AA84655796EEECE652305899D981C58B1904A6F', 'Programmable Objects\dbo\Stored Procedures\prcAddContact.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('31b3534b-f7a4-5982-9fc9-e890f670bdb4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '2EE116B25C28773C63E3339B73B6085F3D97688442AD7FA190129F73CB868B9A')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\prcGetContacts.sql", ID: {31b3534b-f7a4-5982-9fc9-e890f670bdb4} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('31b3534b-f7a4-5982-9fc9-e890f670bdb4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '2EE116B25C28773C63E3339B73B6085F3D97688442AD7FA190129F73CB868B9A')
BEGIN
  PRINT '----- Skipping "Programmable Objects\dbo\Stored Procedures\prcGetContacts.sql", ID: {31b3534b-f7a4-5982-9fc9-e890f670bdb4} as there are no changes to deploy';
  SET NOEXEC ON;
END

GO
EXECUTE ('IF OBJECT_ID(''[dbo].[prcGetContacts]'') IS NOT NULL
	DROP PROCEDURE [dbo].[prcGetContacts];

');

GO
SET QUOTED_IDENTIFIER ON

GO
SET ANSI_NULLS ON

GO
EXECUTE ('CREATE PROCEDURE [dbo].[prcGetContacts]
AS
    SELECT  *
    FROM    Contacts

	-- v7
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('31b3534b-f7a4-5982-9fc9-e890f670bdb4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '2EE116B25C28773C63E3339B73B6085F3D97688442AD7FA190129F73CB868B9A')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\prcGetContacts.sql", ID: {31b3534b-f7a4-5982-9fc9-e890f670bdb4} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('31b3534b-f7a4-5982-9fc9-e890f670bdb4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '2EE116B25C28773C63E3339B73B6085F3D97688442AD7FA190129F73CB868B9A')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('31b3534b-f7a4-5982-9fc9-e890f670bdb4' AS UNIQUEIDENTIFIER), '2EE116B25C28773C63E3339B73B6085F3D97688442AD7FA190129F73CB868B9A', 'Programmable Objects\dbo\Stored Procedures\prcGetContacts.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4cc7b5d2-26a3-5a66-bac9-24e4f6dc467f' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'E0ECE1BA748E1CFFBE869BA14AA70B0116E389348FBC1E7DF44CAF322030E998')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\prcGetRSSFeeds.sql", ID: {4cc7b5d2-26a3-5a66-bac9-24e4f6dc467f} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4cc7b5d2-26a3-5a66-bac9-24e4f6dc467f' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'E0ECE1BA748E1CFFBE869BA14AA70B0116E389348FBC1E7DF44CAF322030E998')
BEGIN
  PRINT '----- Skipping "Programmable Objects\dbo\Stored Procedures\prcGetRSSFeeds.sql", ID: {4cc7b5d2-26a3-5a66-bac9-24e4f6dc467f} as there are no changes to deploy';
  SET NOEXEC ON;
END

GO
EXECUTE ('IF OBJECT_ID(''[dbo].[prcGetRSSFeeds]'') IS NOT NULL
	DROP PROCEDURE [dbo].[prcGetRSSFeeds];

');

GO
SET QUOTED_IDENTIFIER ON

GO
SET ANSI_NULLS ON

GO
EXECUTE ('CREATE PROCEDURE [dbo].[prcGetRSSFeeds]
AS
    SELECT  RSSFeedID,
            FeedName,
            Checked
    FROM    dbo.RSSFeeds

	-- v4
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4cc7b5d2-26a3-5a66-bac9-24e4f6dc467f' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'E0ECE1BA748E1CFFBE869BA14AA70B0116E389348FBC1E7DF44CAF322030E998')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\prcGetRSSFeeds.sql", ID: {4cc7b5d2-26a3-5a66-bac9-24e4f6dc467f} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4cc7b5d2-26a3-5a66-bac9-24e4f6dc467f' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'E0ECE1BA748E1CFFBE869BA14AA70B0116E389348FBC1E7DF44CAF322030E998')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('4cc7b5d2-26a3-5a66-bac9-24e4f6dc467f' AS UNIQUEIDENTIFIER), 'E0ECE1BA748E1CFFBE869BA14AA70B0116E389348FBC1E7DF44CAF322030E998', 'Programmable Objects\dbo\Stored Procedures\prcGetRSSFeeds.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73b2afe0-8cf7-5ca6-9ad7-318fdaf4b859' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9965CF21C6846B81652EA5F008713B9939D23635961BD74FFBD9DAD0D6C174C0')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\prcProcedureWithDynamicSQL.sql", ID: {73b2afe0-8cf7-5ca6-9ad7-318fdaf4b859} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73b2afe0-8cf7-5ca6-9ad7-318fdaf4b859' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9965CF21C6846B81652EA5F008713B9939D23635961BD74FFBD9DAD0D6C174C0')
BEGIN
  PRINT '----- Skipping "Programmable Objects\dbo\Stored Procedures\prcProcedureWithDynamicSQL.sql", ID: {73b2afe0-8cf7-5ca6-9ad7-318fdaf4b859} as there are no changes to deploy';
  SET NOEXEC ON;
END

GO
EXECUTE ('IF OBJECT_ID(''[dbo].[prcProcedureWithDynamicSQL]'') IS NOT NULL
	DROP PROCEDURE [dbo].[prcProcedureWithDynamicSQL];

');

GO
SET QUOTED_IDENTIFIER ON

GO
SET ANSI_NULLS ON

GO
EXECUTE ('/* This is a procedure that simply contains dynamic SQL just to demonstrate that dependencies aren''t picked up. 
Use SQL Search to find these. */
CREATE PROCEDURE [dbo].[prcProcedureWithDynamicSQL]
AS 
    BEGIN

        EXECUTE  (''SELECT count(*) FROM Contacts WHERE ContactFullName LIKE ''''D%'''''')
    END
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''This serves no purpose except to demonstrate that SQL Search can find object names referenced in dynamic SQL, whereas other methods and tools can''''t.'', ''SCHEMA'', N''dbo'', ''PROCEDURE'', N''prcProcedureWithDynamicSQL'', NULL, NULL
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73b2afe0-8cf7-5ca6-9ad7-318fdaf4b859' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9965CF21C6846B81652EA5F008713B9939D23635961BD74FFBD9DAD0D6C174C0')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\prcProcedureWithDynamicSQL.sql", ID: {73b2afe0-8cf7-5ca6-9ad7-318fdaf4b859} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73b2afe0-8cf7-5ca6-9ad7-318fdaf4b859' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9965CF21C6846B81652EA5F008713B9939D23635961BD74FFBD9DAD0D6C174C0')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('73b2afe0-8cf7-5ca6-9ad7-318fdaf4b859' AS UNIQUEIDENTIFIER), '9965CF21C6846B81652EA5F008713B9939D23635961BD74FFBD9DAD0D6C174C0', 'Programmable Objects\dbo\Stored Procedures\prcProcedureWithDynamicSQL.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ca6e2638-75d9-5231-b447-a28752cb2ea4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '31499F1CB7663D14FC21015FD0D8AAFBA734779C74DB590A92ADFE0E6866F987')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Views\ArticlesPriceList.sql", ID: {ca6e2638-75d9-5231-b447-a28752cb2ea4} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ca6e2638-75d9-5231-b447-a28752cb2ea4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '31499F1CB7663D14FC21015FD0D8AAFBA734779C74DB590A92ADFE0E6866F987')
BEGIN
  PRINT '----- Skipping "Programmable Objects\dbo\Views\ArticlesPriceList.sql", ID: {ca6e2638-75d9-5231-b447-a28752cb2ea4} as there are no changes to deploy';
  SET NOEXEC ON;
END

GO
EXECUTE ('IF OBJECT_ID(''[dbo].[ArticlesPriceList]'') IS NOT NULL
	DROP VIEW [dbo].[ArticlesPriceList];

');

GO
SET QUOTED_IDENTIFIER ON

GO
SET ANSI_NULLS ON

GO
EXECUTE ('-- Create indexed view
CREATE VIEW [dbo].[ArticlesPriceList]
AS
SELECT     a.ArticlesID, a.Description AS Articles, ap.Price
FROM       dbo.Articles AS a LEFT JOIN
           dbo.ArticlePrices AS ap ON a.ArticlesID = ap.ArticlePricesID
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ca6e2638-75d9-5231-b447-a28752cb2ea4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '31499F1CB7663D14FC21015FD0D8AAFBA734779C74DB590A92ADFE0E6866F987')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Views\ArticlesPriceList.sql", ID: {ca6e2638-75d9-5231-b447-a28752cb2ea4} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ca6e2638-75d9-5231-b447-a28752cb2ea4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '31499F1CB7663D14FC21015FD0D8AAFBA734779C74DB590A92ADFE0E6866F987')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('ca6e2638-75d9-5231-b447-a28752cb2ea4' AS UNIQUEIDENTIFIER), '31499F1CB7663D14FC21015FD0D8AAFBA734779C74DB590A92ADFE0E6866F987', 'Programmable Objects\dbo\Views\ArticlesPriceList.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('aab5f5fe-6c5f-5b1c-bd80-5046da2cb829' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BFE6DA35A9518D1E80708A4D52902DFA9EB9BC0509C49B6EECE019D2294CDF17')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Views\newview.sql", ID: {aab5f5fe-6c5f-5b1c-bd80-5046da2cb829} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('aab5f5fe-6c5f-5b1c-bd80-5046da2cb829' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BFE6DA35A9518D1E80708A4D52902DFA9EB9BC0509C49B6EECE019D2294CDF17')
BEGIN
  PRINT '----- Skipping "Programmable Objects\dbo\Views\newview.sql", ID: {aab5f5fe-6c5f-5b1c-bd80-5046da2cb829} as there are no changes to deploy';
  SET NOEXEC ON;
END

GO
EXECUTE ('IF OBJECT_ID(''[dbo].[newview]'') IS NOT NULL
	DROP VIEW [dbo].[newview];

');

GO
SET QUOTED_IDENTIFIER ON

GO
SET ANSI_NULLS ON

GO
EXECUTE ('--Author: RED-GATE\Anderson.Rangel
--Date: 27/08/2020
CREATE VIEW [dbo].[newview]
--WITH ENCRYPTION, SCHEMABINDING, VIEW_METADATA
AS
    SELECT * FROM dbo.ArticlePrices AS AP
-- WITH CHECK OPTION
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('aab5f5fe-6c5f-5b1c-bd80-5046da2cb829' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BFE6DA35A9518D1E80708A4D52902DFA9EB9BC0509C49B6EECE019D2294CDF17')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Views\newview.sql", ID: {aab5f5fe-6c5f-5b1c-bd80-5046da2cb829} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('aab5f5fe-6c5f-5b1c-bd80-5046da2cb829' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BFE6DA35A9518D1E80708A4D52902DFA9EB9BC0509C49B6EECE019D2294CDF17')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('aab5f5fe-6c5f-5b1c-bd80-5046da2cb829' AS UNIQUEIDENTIFIER), 'BFE6DA35A9518D1E80708A4D52902DFA9EB9BC0509C49B6EECE019D2294CDF17', 'Programmable Objects\dbo\Views\newview.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('189804f6-32e3-5a46-b331-82ec8e10a286' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CAB28E99DA7C8BA39A6F38A1408E14B041939C4FE4DA72A971F3A3FCDE52F121')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Views\v_Blogs.sql", ID: {189804f6-32e3-5a46-b331-82ec8e10a286} *****';

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('189804f6-32e3-5a46-b331-82ec8e10a286' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CAB28E99DA7C8BA39A6F38A1408E14B041939C4FE4DA72A971F3A3FCDE52F121')
BEGIN
  PRINT '----- Skipping "Programmable Objects\dbo\Views\v_Blogs.sql", ID: {189804f6-32e3-5a46-b331-82ec8e10a286} as there are no changes to deploy';
  SET NOEXEC ON;
END

GO
EXECUTE ('IF OBJECT_ID(''[dbo].[v_Blogs]'') IS NOT NULL
	DROP VIEW [dbo].[v_Blogs];

');

GO
SET QUOTED_IDENTIFIER ON

GO
SET ANSI_NULLS ON

GO
EXECUTE ('CREATE VIEW [dbo].[v_Blogs]
AS
SELECT  c.ContactFullName, Title, Article, PublishDate
FROM    Blogs
        INNER JOIN dbo.Contacts c ON c.ContactsID = dbo.Blogs.AuthorID
');

GO
EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''View to pull down list of blogs'', ''SCHEMA'', N''dbo'', ''VIEW'', N''v_Blogs'', NULL, NULL
');

GO
SET NOEXEC OFF;

GO
IF N'$(IsSqlCmdEnabled)' <> N'True'
  SET NOEXEC ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('189804f6-32e3-5a46-b331-82ec8e10a286' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CAB28E99DA7C8BA39A6F38A1408E14B041939C4FE4DA72A971F3A3FCDE52F121')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Views\v_Blogs.sql", ID: {189804f6-32e3-5a46-b331-82ec8e10a286} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('189804f6-32e3-5a46-b331-82ec8e10a286' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CAB28E99DA7C8BA39A6F38A1408E14B041939C4FE4DA72A971F3A3FCDE52F121')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('189804f6-32e3-5a46-b331-82ec8e10a286' AS UNIQUEIDENTIFIER), 'CAB28E99DA7C8BA39A6F38A1408E14B041939C4FE4DA72A971F3A3FCDE52F121', 'Programmable Objects\dbo\Views\v_Blogs.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
PRINT '# Committing transaction';

COMMIT TRANSACTION;

GO







------------------------------------------------------------------------------------------------------------------------
------------------------------------------       POST-DEPLOYMENT SCRIPTS      ------------------------------------------
------------------------------------------------------------------------------------------------------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO

PRINT '----- executing post-deployment script "Post-Deployment\01_Finalize_Deployment.sql" -----';
GO

---------------------- BEGIN POST-DEPLOYMENT SCRIPT: "Post-Deployment\01_Finalize_Deployment.sql" ------------------------
/*
Post-Deployment Script Template
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.
 Use SQLCMD syntax to include a file in the post-deployment script.
 Example:      :r .\myfile.sql
 Use SQLCMD syntax to reference a variable in the post-deployment script.
 Example:      :setvar TableName MyTable
               SELECT * FROM [$(TableName)]
--------------------------------------------------------------------------------------
*/

GO
----------------------- END POST-DEPLOYMENT SCRIPT: "Post-Deployment\01_Finalize_Deployment.sql" -------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO


IF SERVERPROPERTY('EngineEdition') != 5 AND HAS_PERMS_BY_NAME(N'sys.xp_logevent', N'OBJECT', N'EXECUTE') = 1
BEGIN
  DECLARE @databaseName AS nvarchar(2048), @eventMessage AS nvarchar(2048)
  SET @databaseName = REPLACE(REPLACE(DB_NAME(), N'\', N'\\'), N'"', N'\"')
  SET @eventMessage = N'Redgate SQL Change Automation: { "deployment": { "description": "Redgate SQL Change Automation deployed $(ReleaseVersion) to ' + @databaseName + N'", "database": "' + @databaseName + N'" }}'
  EXECUTE sys.xp_logevent 55000, @eventMessage
END
PRINT 'Deployment completed successfully.'
GO




SET NOEXEC OFF; -- Resume statement execution if an error occurred within the script pre-amble
